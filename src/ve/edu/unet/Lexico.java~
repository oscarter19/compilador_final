// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: D:/Universidad/2024-1/Proyecto/compilador_final/src/especificacion/pascalito.flex

package ve.edu.unet;

import java_cup.runtime.*;
import java.io.Reader;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\7\0"+
    "\1\5\1\6\1\7\1\10\1\0\1\11\1\0\1\12"+
    "\12\13\1\14\1\15\1\16\1\17\1\20\2\0\32\21"+
    "\6\0\1\22\1\23\1\21\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\2\21\1\32\1\33\1\34\1\35\1\36"+
    "\1\21\1\37\1\40\1\41\1\42\1\43\1\44\3\21"+
    "\1\45\1\0\1\46\7\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\0\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\17\17\1\1\1\3\1\20\1\21\1\22\1\23"+
    "\2\17\1\24\3\17\1\25\2\17\1\26\2\17\1\27"+
    "\4\17\1\0\1\30\1\31\3\17\1\32\1\33\1\34"+
    "\1\35\5\17\1\36\3\17\1\37\1\40\1\17\1\41"+
    "\1\42\2\17\1\43\2\17\1\44\1\45\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\47\0\47\0\47"+
    "\0\47\0\47\0\47\0\303\0\352\0\47\0\u0111\0\47"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\47\0\47\0\47\0\47\0\47\0\u03cf\0\u03f6"+
    "\0\u041d\0\u0444\0\u046b\0\u0492\0\u015f\0\u04b9\0\u04e0\0\u015f"+
    "\0\u0507\0\u052e\0\u015f\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u03a8"+
    "\0\47\0\u015f\0\u05f1\0\u0618\0\u063f\0\u015f\0\u015f\0\u015f"+
    "\0\u015f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u015f\0\u0729"+
    "\0\u0750\0\u0777\0\u015f\0\u015f\0\u079e\0\u015f\0\u015f\0\u07c5"+
    "\0\u07ec\0\u015f\0\u0813\0\u083a\0\u015f\0\u015f\0\u015f\0\u015f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\22"+
    "\1\30\1\22\1\31\1\32\1\33\1\22\1\34\1\22"+
    "\1\35\1\36\1\37\1\40\1\41\1\2\50\0\1\3"+
    "\51\0\1\42\44\0\1\42\57\0\1\14\52\0\1\43"+
    "\46\0\1\44\1\45\45\0\1\46\42\0\1\22\5\0"+
    "\24\22\15\0\1\22\5\0\13\22\1\47\10\22\15\0"+
    "\1\22\5\0\4\22\1\50\17\22\15\0\1\22\5\0"+
    "\14\22\1\51\7\22\15\0\1\22\5\0\11\22\1\52"+
    "\1\22\1\53\10\22\15\0\1\22\5\0\14\22\1\54"+
    "\7\22\15\0\1\22\5\0\5\22\1\55\16\22\15\0"+
    "\1\22\5\0\14\22\1\56\7\22\15\0\1\22\5\0"+
    "\14\22\1\57\7\22\15\0\1\22\5\0\16\22\1\60"+
    "\5\22\15\0\1\22\5\0\4\22\1\61\17\22\15\0"+
    "\1\22\5\0\7\22\1\62\4\22\1\63\1\22\1\64"+
    "\5\22\15\0\1\22\5\0\13\22\1\65\10\22\15\0"+
    "\1\22\5\0\1\22\1\66\22\22\15\0\1\22\5\0"+
    "\16\22\1\67\5\22\2\0\46\70\1\71\13\0\1\22"+
    "\5\0\3\22\1\72\20\22\15\0\1\22\5\0\6\22"+
    "\1\73\15\22\15\0\1\22\5\0\23\22\1\74\15\0"+
    "\1\22\5\0\17\22\1\75\4\22\15\0\1\22\5\0"+
    "\3\22\1\76\20\22\15\0\1\22\5\0\16\22\1\77"+
    "\5\22\15\0\1\22\5\0\3\22\1\100\20\22\15\0"+
    "\1\22\5\0\20\22\1\101\3\22\15\0\1\22\5\0"+
    "\1\22\1\102\13\22\1\103\6\22\15\0\1\22\5\0"+
    "\4\22\1\104\17\22\15\0\1\22\5\0\21\22\1\105"+
    "\2\22\15\0\1\22\5\0\20\22\1\106\3\22\15\0"+
    "\1\22\5\0\16\22\1\107\5\22\15\0\1\22\5\0"+
    "\10\22\1\110\13\22\15\0\1\22\5\0\10\22\1\111"+
    "\13\22\15\0\1\22\5\0\13\22\1\112\10\22\15\0"+
    "\1\22\5\0\4\22\1\113\17\22\15\0\1\22\5\0"+
    "\3\22\1\114\20\22\15\0\1\22\5\0\4\22\1\115"+
    "\17\22\15\0\1\22\5\0\13\22\1\116\10\22\15\0"+
    "\1\22\5\0\4\22\1\117\17\22\15\0\1\22\5\0"+
    "\10\22\1\120\13\22\15\0\1\22\5\0\20\22\1\121"+
    "\3\22\15\0\1\22\5\0\13\22\1\122\10\22\15\0"+
    "\1\22\5\0\20\22\1\123\3\22\15\0\1\22\5\0"+
    "\1\22\1\124\22\22\15\0\1\22\5\0\11\22\1\125"+
    "\12\22\15\0\1\22\5\0\4\22\1\126\17\22\15\0"+
    "\1\22\5\0\14\22\1\127\7\22\15\0\1\22\5\0"+
    "\20\22\1\130\3\22\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2145];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\0\6\11\2\1\1\11\1\1"+
    "\1\11\21\1\5\11\21\1\1\0\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	public Lexico(Reader r, SymbolFactory sf){
        this(r);
		this.sf=sf;
		lineanum=0;
		debug=true;
	}
	private SymbolFactory sf;
	private int lineanum;
	private boolean debug;


/******************************************************************
BORRAR SI NO SE NECESITA
	//TODO: Cambiar la SF por esto o ver que se hace
	//Crear un nuevo objeto java_cup.runtime.Symbol con informaci�n sobre el token actual sin valor
 	  private Symbol symbol(int type){
    		return new Symbol(type,yyline,yycolumn);
	  }
	//Crear un nuevo objeto java_cup.runtime.Symbol con informaci�n sobre el token actual con valor
	  private Symbol symbol(int type,Object value){
    		return new Symbol(type,yyline,yycolumn,value);
	  }
******************************************************************/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return sf.newSymbol("EOF",sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Caracter Ilegal encontrado en analisis lexico: " + yytext() + "\n");
            }
            // fall through
          case 40: break;
          case 2:
            { /* saltos espacios en blanco*/
            }
            // fall through
          case 41: break;
          case 3:
            { lineanum++;
            }
            // fall through
          case 42: break;
          case 4:
            { if(debug) System.out.println("token LPAREN"); return sf.newSymbol("LPAREN",sym.LPAREN);
            }
            // fall through
          case 43: break;
          case 5:
            { if(debug) System.out.println("token RPAREN"); return sf.newSymbol("RPAREN",sym.RPAREN);
            }
            // fall through
          case 44: break;
          case 6:
            { if(debug) System.out.println("token TIMES"); return sf.newSymbol("TIMES",sym.TIMES);
            }
            // fall through
          case 45: break;
          case 7:
            { if(debug) System.out.println("token PLUS"); return sf.newSymbol("PLUS",sym.PLUS);
            }
            // fall through
          case 46: break;
          case 8:
            { if(debug) System.out.println("token MINUS"); return sf.newSymbol("MINUS",sym.MINUS);
            }
            // fall through
          case 47: break;
          case 9:
            { if(debug) System.out.println("token DIV"); return sf.newSymbol("DIV",sym.DIV);
            }
            // fall through
          case 48: break;
          case 10:
            { if(debug) System.out.println("token NUMBER"); return sf.newSymbol("INTEGER",sym.INTEGER, Integer.parseInt(yytext()));
            }
            // fall through
          case 49: break;
          case 11:
            { if(debug) System.out.println("token SEMI"); return sf.newSymbol("SEMI",sym.SEMI);
            }
            // fall through
          case 50: break;
          case 12:
            { if(debug) System.out.println("token LT"); return sf.newSymbol("LT",sym.LT);
            }
            // fall through
          case 51: break;
          case 13:
            { if(debug) System.out.println("token EQ"); return sf.newSymbol("EQ",sym.EQ);
            }
            // fall through
          case 52: break;
          case 14:
            { if(debug) System.out.println("token GT"); return sf.newSymbol("GT",sym.GT);
            }
            // fall through
          case 53: break;
          case 15:
            { if(debug) System.out.println("token ID"); return sf.newSymbol("ID",sym.ID, yytext());
            }
            // fall through
          case 54: break;
          case 16:
            { if(debug) System.out.println("token ASSIGN"); return sf.newSymbol("ASSIGN",sym.ASSIGN);
            }
            // fall through
          case 55: break;
          case 17:
            { if(debug) System.out.println("token LEQ"); return sf.newSymbol("LEQ",sym.LEQ);
            }
            // fall through
          case 56: break;
          case 18:
            { if(debug) System.out.println("token NEQ"); return sf.newSymbol("NEQ",sym.NEQ);
            }
            // fall through
          case 57: break;
          case 19:
            { if(debug) System.out.println("token GEQ"); return sf.newSymbol("GEQ",sym.GEQ);
            }
            // fall through
          case 58: break;
          case 20:
            { if(debug) System.out.println("token DO"); return sf.newSymbol("DO",sym.DO);
            }
            // fall through
          case 59: break;
          case 21:
            { if(debug) System.out.println("token IF"); return sf.newSymbol("IF",sym.IF);
            }
            // fall through
          case 60: break;
          case 22:
            { if(debug) System.out.println("token OR"); return sf.newSymbol("OR",sym.OR);
            }
            // fall through
          case 61: break;
          case 23:
            { if(debug) System.out.println("token TO"); return sf.newSymbol("TO",sym.TO);
            }
            // fall through
          case 62: break;
          case 24:
            { /* salto comentarios */ if(debug) System.out.println("token COMENTARIO");
            }
            // fall through
          case 63: break;
          case 25:
            { if(debug) System.out.println("token AND"); return sf.newSymbol("AND",sym.AND);
            }
            // fall through
          case 64: break;
          case 26:
            { if(debug) System.out.println("token END"); return sf.newSymbol("END",sym.END);
            }
            // fall through
          case 65: break;
          case 27:
            { if(debug) System.out.println("token FOR"); return sf.newSymbol("FOR",sym.FOR);
            }
            // fall through
          case 66: break;
          case 28:
            { if(debug) System.out.println("token MOD"); return sf.newSymbol("MOD",sym.MOD);
            }
            // fall through
          case 67: break;
          case 29:
            { if(debug) System.out.println("token NOT"); return sf.newSymbol("NOT",sym.NOT);
            }
            // fall through
          case 68: break;
          case 30:
            { if(debug) System.out.println("token VAR"); return sf.newSymbol("VAR",sym.VAR);
            }
            // fall through
          case 69: break;
          case 31:
            { if(debug) System.out.println("token ELSE"); return sf.newSymbol("ELSE",sym.ELSE);
            }
            // fall through
          case 70: break;
          case 32:
            { if(debug) System.out.println("token READ"); return sf.newSymbol("READ",sym.READ);
            }
            // fall through
          case 71: break;
          case 33:
            { if(debug) System.out.println("token THEN"); return sf.newSymbol("THEN",sym.THEN);
            }
            // fall through
          case 72: break;
          case 34:
            { if(debug) System.out.println("token BOOLEAN"); return sf.newSymbol("BOOLEAN",sym.BOOLEAN, Boolean.parseBoolean(yytext()));
            }
            // fall through
          case 73: break;
          case 35:
            { if(debug) System.out.println("token BEGIN"); return sf.newSymbol("BEGIN",sym.BEGIN);
            }
            // fall through
          case 74: break;
          case 36:
            { if(debug) System.out.println("token UNTIL"); return sf.newSymbol("UNTIL",sym.UNTIL);
            }
            // fall through
          case 75: break;
          case 37:
            { if(debug) System.out.println("token WRITE"); return sf.newSymbol("WRITE",sym.WRITE);
            }
            // fall through
          case 76: break;
          case 38:
            { if(debug) System.out.println("token DOWNTO"); return sf.newSymbol("TO",sym.DOWNTO);
            }
            // fall through
          case 77: break;
          case 39:
            { if(debug) System.out.println("token REPEAT"); return sf.newSymbol("REPEAT",sym.REPEAT);
            }
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
